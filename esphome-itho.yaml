substitutions:
  itho_id1: !secret itho_id1
  itho_id2: !secret itho_id2
  itho_id3: !secret itho_id3

esphome:
  name: esphome-itho
  includes: 
    - itho.h
  libraries: 
    - SPI
    - https://github.com/foxey/lib-itho
 
 #Set ID from remotes that are used, so you can identify the root of the last State change
  on_boot:
    then:
      - lambda: |-
          Idlist[0]={"${itho_id1}","Badkamer Boven"};
          Idlist[1]={"${itho_id2}","Badkamer Beneden"};
          Idlist[2]={"${itho_id3}","ID3"};
          Mydeviceid="Homeassistant"; 
          rf.setDeviceID(10,87,81); //ID for sending: 10,87,81 was used in old library
          id(swfan_low).turn_on(); //This ensures fan is at low-speed at boot

esp8266:
  board: nodemcuv2
  restore_from_flash: False

# Enable Home Assistant API
api:
  password: !secret ha_api_password
  encryption:
    key: !secret ha_api_encryption_key

ota:
  password: !secret ha_api_password
  on_begin:
    then:
      - lambda: |-
          ESP_LOGI("custom", "Disable Interrupts, to allow OTA without intterupts");
          detachInterrupt(D1);
          delay(500);

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable logging
logger:
  level: DEBUG
  esp8266_store_log_strings_in_flash: False

switch:
- platform: custom
  lambda: |-
    auto fansendlow = new FanSendLow();
    App.register_component(fansendlow);
    return {fansendlow};

  switches:
    name: "FanSendLow"
    id: swfan_low

- platform: custom
  lambda: |-
    auto fansendmedium = new FanSendMedium();
    App.register_component(fansendmedium);
    return {fansendmedium};

  switches:
    name: "FanSendMedium"

- platform: custom
  lambda: |-
    auto fansendhigh = new FanSendHigh();
    App.register_component(fansendhigh);
    return {fansendhigh};

  switches:
    name: "FanSendHigh"

- platform: custom
  lambda: |-
    auto fansendt1 = new FanSendIthoTimer1();
    App.register_component(fansendt1);
    return {fansendt1};

  switches:
    name: "FanSendTimer1"

- platform: custom
  lambda: |-
    auto fansendt2 = new FanSendIthoTimer2();
    App.register_component(fansendt2);
    return {fansendt2};

  switches:
    name: "FanSendTimer2"

- platform: custom
  lambda: |-
    auto fansendt3 = new FanSendIthoTimer3();
    App.register_component(fansendt3);
    return {fansendt3};

  switches:
    name: "FanSendTimer3"

- platform: custom
  lambda: |-
    auto fansendjoin = new FanSendIthoJoin();
    App.register_component(fansendjoin);
    return {fansendjoin};
  switches:
    name: "FanSendJoin"

text_sensor:
- platform: custom
  lambda: |-
    auto fanrecv = new FanRecv();
    App.register_component(fanrecv);
    return {fanrecv->fanspeed,fanrecv->fantimer,fanrecv->Lastid};
  text_sensors:
    - name: "fanspeed"
      icon: "mdi:speedometer"   
    - name: "fantimer"
      icon: "mdi:fan-clock"  
    - name: "lastid"
      icon: "mdi:tag"

  
      

 
